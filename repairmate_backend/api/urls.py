#  repairmate_backend/api/urls.py

from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from rest_framework.routers import DefaultRouter
from .views import (
    register_user, user_profile, CustomAuthToken, MachineViewSet, ManufacturerViewSet,
    EquipmentCategoryViewSet, DepartmentViewSet, MachineTypeViewSet, machine_issues, #create_solution
    match_issues, AllIssuesView, issue_detail, create_issue, solution_operations, 
    IssueViewSet, StepViewSet, SubscriptionPlanViewSet, OrganizationViewSet,
    UserPreferencesViewSet, UserActivityLogViewSet, UserNoteViewSet, TrainingWorkspaceViewSet
)

from django.urls import path
from . import views

# Set up the DefaultRouter for automatically generating routes for viewsets
router = DefaultRouter()
router.register(r'machines', MachineViewSet)
router.register(r'manufacturers', ManufacturerViewSet)
router.register(r'categories', EquipmentCategoryViewSet)
router.register(r'departments', DepartmentViewSet)
router.register(r'machine-types', MachineTypeViewSet)
router.register(r'issues', IssueViewSet)
router.register(r'steps', StepViewSet)

# Routes for managing subscription plans and organizations
router.register(r'subscription-plans', SubscriptionPlanViewSet) # New
router.register(r'organizations', OrganizationViewSet) # New

# Routes for user-related settings and activity tracking
router.register(r'preferences', UserPreferencesViewSet, basename='preferences') # New
router.register(r'activity-logs', UserActivityLogViewSet, basename='activity-logs') # New
router.register(r'notes', UserNoteViewSet, basename='notes')

# Routes for training-related features
router.register(r'training/workspaces', TrainingWorkspaceViewSet, basename='training-workspace')

# Define all urlpatterns for the API
urlpatterns = [
    path('', include(router.urls)), # Include all routes generated by the router
    path('api-token-auth/', CustomAuthToken.as_view(), name='api_token_auth'), # Token authentication
    path('register/', register_user, name='register'),
    path('user/profile/', user_profile, name='user_profile'),
    # Routes for issue matching and troubleshooting
    path('match-issues/', match_issues, name='match_issues'),
    path('machines/<int:machine_id>/issues/', machine_issues, name='machine_issues'), # for TroubleshootDetails.js
    path('machines/<int:machine_id>/issues/', create_issue, name='create_issue'), # Do not change this (important to edit and save)
    path('issues/<int:issue_id>/', issue_detail, name='issue_detail'), # Important to retrieve the detail issue (PageIssue.js)
    
    # Route for viewing all issues
    path('issues/', AllIssuesView.as_view(), name='all_issues'),
    
    # Routes for solution operations
    path('issues/<int:issue_id>/solutions/', solution_operations, name='issue_solutions'),
    path('issues/<int:issue_id>/solutions/', views.solution_operations, name='solution_operations'),
    path('solutions/<int:solution_id>/', views.solution_operations, name='solution_detail'),
    # Route for updating a solution
    path('solutions/<int:solution_id>/', solution_operations, name='update_solution'),
    # Ensure the solution operations view handles DELETE method
    path('solutions/<int:solution_id>/', solution_operations, name='solution_operations'), # New

    path('machines/<int:pk>/images/', MachineViewSet.as_view({'get': 'get_images'})),  # We add this a solve the default image

    path('media/managed_files/<str:image_name>', views.serve_image, name='serve_image'),
    path('solutions/<int:solution_id>/guide/', views.create_guide, name='create_guide'),

    path('steps/<int:step_id>/upload_image/', views.upload_step_image, name='upload_step_image'),

    # Routes for managing machine manuals (upload, retrieve, delete)
    path('machines/<int:machine_id>/manual/upload/', views.upload_machine_manual, name='upload_manual'),
    path('machines/<int:machine_id>/manual/', views.get_machine_manual, name='get_manual'),
    path('machines/<int:machine_id>/manual/delete/', views.delete_machine_manual, name='delete_manual'),

] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)